import json

import pytest
from unittest import mock

# new_case: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è redis
# new_case: üîπ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞,
# new_case: üîπ –ó–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä,
# new_case: üîπ –ö–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
# new_case: üí° –≠—Ç–æ —à–∞–±–ª–æ–Ω "–∑–∞–≥–ª—É—à–∫–∏" –¥–ª—è –ª—é–±—ã—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
mock.patch("fastapi_cache.decorator.cache", lambda *args, **kwargs: lambda func: func).start()

from httpx import ASGITransport, AsyncClient
from src.config import settings
from src.database import BaseModel, new_session_null_pool, engine, new_session
from src.main import app
from src.models import *
from src.schemas.hotels import Hotel, HotelAdd
from src.schemas.room import AddRoomToDb
from src.utils.db_manager import DBManager


@pytest.fixture(autouse=True, scope="session")
def check_env():
    assert settings.MODE == "test"


@pytest.fixture(autouse=True, scope="session")
async def create_table(check_env):
    async with engine.begin() as conn:  # new_case: –í–∞–∂–Ω–æ —á—Ç–æ engine –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º poolclass=NullPool
        await conn.run_sync(BaseModel.metadata.drop_all)
        await conn.run_sync(BaseModel.metadata.create_all)


@pytest.fixture(
    scope="function")  # new_case: "function" —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç—Ç–æ fixture –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
async def db(create_table):
    async with DBManager(session_factory=new_session) as db:
        yield db


@pytest.fixture(scope="session")  # new_case: "session" –≤—ã–∑–æ–≤–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤—Å—é —Å–µ—Å—Å–∏—é
async def ac(create_table):
    async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        yield ac


@pytest.fixture(autouse=True, scope="session")
async def register_user(create_table, ac):
    creds = {
        "email": "str@exampel.com",
        "password": "str@exampel.com"
    }
    response = await ac.post("/auth/register", json=creds)
    assert response.status_code == 200
    return creds


# new_case: –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ —Å–≤–æ–π db_ –≤–Ω—É—Ç—Ä–∏
@pytest.fixture(autouse=True, scope="session")
async def add_hotels_rooms(create_table):
    with open("tests/mock_hotels.json", "r") as file:
        hotels_: list[dict] = json.load(file)

    with open("tests/mock_rooms.json", "r") as file:
        rooms_: list[dict] = json.load(file)

    hotel_models = [HotelAdd.model_validate(model) for model in hotels_]
    rooms_models = [AddRoomToDb.model_validate(model) for model in rooms_]

    async with DBManager(session_factory=new_session_null_pool) as db_:
        await db_.hotels.add_bulk(hotel_models)
        await db_.rooms.add_bulk(rooms_models)
        await db_.commit()


@pytest.fixture(scope="session")
async def auth_ac(register_user, ac):
    creds = register_user
    response = await ac.post("/auth/login", json=creds)
    assert response.status_code == 200
    print(f'{ac.cookies =}')
    assert ac.cookies["access_token"]
    yield ac
